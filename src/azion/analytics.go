package azion

// AnalyticsService handles communication with the Azion API methods related to
// Analytics.
type AnalyticsService struct {
	client *Client
}

// Analytics represents a Azion Analytics.
type Analytics struct {
	Name *string `json:"name"`
	ID   *uint   `json:"id,omitempty"`
}

// AnalyticsMetric represents a Azion Analytics Metric.
type AnalyticsMetric struct {
	Name       *string `json:"name"`
	Dimensions []AnalyticsMetricDim
}

// AnalyticsMetricDim represents a Azion Analytics Metric dimensions.
type AnalyticsMetricDim map[string][]string

// GetMatadata returns the metadata path values.
//
// Azion API docs: https://www.azion.com.br/developers/api-v2/analytics/
func (a *AnalyticsService) GetMatadata() (*AnalyticsMetricDim, error) {
	req, err := a.client.NewRequest("GET", "/analytics/metadata", nil)
	if err != nil {
		return nil, err
	}

	dimensionsResponse := new(AnalyticsMetricDim)

	_, err = a.client.Do(req, &dimensionsResponse)
	if err != nil {
		return nil, err
	}

	return dimensionsResponse, nil
}

// CD: Content Delivery (1441740010)

// MetricResponse is a metric response payload
type MetricResponse map[string]map[string]map[string]map[string][][]interface{}

type AutoGenerated struct {
	Products struct {
		Num1441740010 struct {
			Requests struct {
				Total [][]interface{} `json:"total"`
			} `json:"requests"`
		} `json:"1441740010"`
	} `json:"products"`
}

// GetCDRequestsTotal return the metric of Total of Requests
func (a *AnalyticsService) GetCDRequestsTotal() (*MetricResponse, error) {
	url := "/analytics/products/1441740010/aggregate/metrics/requests/dimensions/total?date_from=last-hour"
	req, err := a.client.NewRequest("GET", url, nil)
	if err != nil {
		return nil, err
	}

	metrics := new(MetricResponse)

	_, err = a.client.Do(req, &metrics)
	if err != nil {
		return nil, err
	}

	return metrics, nil
}
